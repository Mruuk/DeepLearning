o tuning é uma técinica de ajuste de parâmetros muito utilizada no keras

é uma técinica que vai descobrir qual os melhores parâmetros,
como quantos neurônios terá na camada oculta,qual a loss function será utilizada,
como será a inicialização dos pesos, qual função de ativação será utilizada

DOCUMENTAÇÃO -:

    implementação
        
        #importa modelo de grade parar visualizar o resultado melhor
        from sklearn.model_selection import GridSearchCV

        #na função já criada, add os paramentros cujo serão avaliados quais melhores se encaixam
        def criarRede(optimizer, loos, kernel_initializer, activation, neurons):
            classificador = Sequential()
            classificador.add(Dense(units = neurons, activation = activation, 
                                kernel_initializer = kernel_initializer, input_dim = 30))
            classificador.add(Dropout(0.2))
            classificador.add(Dense(units = neurons, activation = activation, 
                                kernel_initializer = kernel_initializer))
            classificador.add(Dropout(0.2))
            classificador.add(Dense(units = 1, activation = 'sigmoid'))
            classificador.compile(optimizer = optimizer, loss = loos,
                            metrics = ['binary_accuracy'])
            return classificador

        #criar a rede neural apenas com o build_fn
        classificador = KerasClassifier(build_fn = criarRede)
        
        #cria um dicionário com todos os parametros que serão avaliados,
        #   e define os valores que deseja comparar o melhor desempenho
        parametros = {'batch_size': [10, 30],
                    'epochs': [50, 100],
                    'optimizer': ['adam', 'sgd'],
                    'loos': ['binary_crossentropy', 'hinge'],
                    'kernel_initializer': ['random_uniform', 'normal'],
                    'activation': ['relu', 'tanh'],
                    'neurons': [16, 8]}

        #aqui será realizada a verificação dos melhores parametros
        grid_search = GridSearchCV(estimator = classificador,
                                param_grid = parametros,
                                scoring = 'accuracy',
                                cv = 5)
        #informa a entrada e o rasultado corretos                           
        grid_search = grid_search.fit(previsores, classe)

        #retornará os melhores paramentros
        melhores_parametros = grid_search.best_params_

        #retornará a melhor precisao
        melhor_precisao = grid_search.best_score_



       