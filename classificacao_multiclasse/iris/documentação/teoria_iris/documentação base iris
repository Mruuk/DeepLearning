    #importação do pandas para leitura do csv, modelo e camada do keras
        import pandas as pd
        from keras.models import Sequential
        from keras.layers import Dense, Dropout

#instancia a base da dados
        base = pd.read_csv('recursos/iris.csv')

#necessário divisão da base, devido ao formado, 
# tanto a entrada qndo a saida então em uma mesma base de dado
#iloc realiza a separação [em toda linha, no intervalo 0-4],
# o .values converte os valores para que possa ser lido
        previsores = base.iloc[:, 0:4].values
        classe = base.iloc[:, 4].values

#importação e configuração, para o treinamento da rede neural
        from sklearn.model_selection import train_test_split
        previsores_treinamento, previsores_teste, classe_treinamento, classe_test = train_test_split(previsores, classe, test_size=0.25)


#ciração da rede neural, possuimos na base de dados 4 atributos relacionais,
# 3 saidas, que são a classificação das três plantas, (4+3)/2=3.5, logo units=4
#input_dim é a entrada, logo são os atributos
#na camada de saida, são 3 saidas, e a função de ativação será softmax, devido a ser multiclasse,
# ela funciona como a sigmoid, porem proporciona a propabilidade para mais classes 
#no compile a loss function ultiliza a categorical_crossentropy, semelhante ao binary_entropy,
# traz a probabilidade para mais classes
#metrics será o categorical_accuracy devido ao multicalsse
        classificador = Sequential()
        classificador.add(Dense(units = 4, activation= 'relu', input_dim= 4))
        classificador.add(Dense(units = 4, activation = 'relu'))
        classificador.add(Dense(units = 3, activation= 'softmax'))
        classificador.compile(optimizer = 'adam', loss = 'categorical_crossentropy',
                            metrics = ['categorical_accuracy'])

#faremos o treinamento
##OBS: necessária converte os valores, espera o formato de três saida, teve apenas uma 
##console-: ValueError: Shapes (None, 1) and (None, 3) are incompatible
        classificador.fit(previsores_treinamento, classe_treinamento, batch_size= 10,
                        epochs= 1000)


DOCUMENTAÇÃO keras

   https://keras.io/api/metrics/accuracy_metrics/#categoricalaccuracy-class
   https://keras.io/api/losses/probabilistic_losses/#categoricalcrossentropy-class
   #também pode ser usado o kullback_leibler_divergence
   https://keras.io/api/losses/probabilistic_losses/#kldivergence-function