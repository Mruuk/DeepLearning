tratamento dos dados usando o label encoder


# separamos os atributos da base de dados
# price é o atributo objetivo, instanciado no preco_real
# e todos os outros atributos previsores vão para os oprevisores
# coluna zero é o price, então, não pegamos ela para os previsores
        previsores = base.iloc[:, 1:13].values
        preco_real = base.iloc[:, 0].values

# importação do LabelEncoder
        from sklearn.preprocessing import LabelEncoder

# instanciamos o labelencoder -:
# função utilizada para transformar valores categóricos em valores numéricos
        labelencoder_previsores = LabelEncoder()

# vamos transformar todos os valores categóricos em numéricos,
# pois funções matemáticas necessitam de números, não de strings
        previsores[:, 0] = labelencoder_previsores.fit_transform(previsores[:, 0])
        previsores[:, 1] = labelencoder_previsores.fit_transform(previsores[:, 1])
        previsores[:, 3] = labelencoder_previsores.fit_transform(previsores[:, 3])
        previsores[:, 5] = labelencoder_previsores.fit_transform(previsores[:, 5])
        previsores[:, 8] = labelencoder_previsores.fit_transform(previsores[:, 8])
        previsores[:, 9] = labelencoder_previsores.fit_transform(previsores[:, 9])
        previsores[:, 10] = labelencoder_previsores.fit_transform(previsores[:, 10])

# visualização da mudança no cod

        array(['test', 'limousine', 1993, 'manuell', 0, 'golf', 150000, 0,
       'benzin', 'volkswagen', 'nein']

        array([1, 6, 1993, 1, 0, 118, 150000, 0, 1, 38, 1],
              [1, 3, 2011, 1, 190, 118, 125000, 5, 3, 1, 0],
              [1, 7, 2004, 0, 163, 119, 125000, 8, 3, 14, 1],

## OBS -: não é mais necessário fazer essa transformação, no OneHotEncoder, sofreu uma atualização que
ele sozinho ja operam fazendo a transformação e dummy
